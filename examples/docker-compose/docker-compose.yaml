# Example JWT Block setup using Docker Compose.
#
# This example sets up a Nginx proxy in front of the httpbin web service.
# The Nginx proxy defers to the JWT Block service for authentication decisions,
# passing the user's JWT.
#
# When the Nginx proxy receives a request for the httpbin web service, it forwards
# the request to the JWT Block service. The JWT Block service will parse, validate,
# and verify the bearer token in the `Authorization` HTTP header, and return 200 on
# allow or 401 on deny.
#
# Usage:
#
#   docker compose up
#
#   docker compose down
#
version: "3.9"

services:


  # The Nginx web proxy fronting other web services and deferring auth checks to JWT Block.
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - 80:80/tcp
    networks:
      default: {}
      webservices: {}
    volumes:
      - "./nginx/nginx.conf:/etc/nginx/conf.d/default.conf"
      - "./ui-app:/usr/share/nginx/ui-app"
    depends_on:
      - httpbin
      - keycloak
      - jwtblock


  # The web service being protected.
  httpbin:
    image: "kennethreitz/httpbin:latest"
    # Uncomment to publicly expose ports on the machine.
    # ports:
    #   - "8080:80"
    networks:
      webservices: {}


  # The Keycloak identity provider handling login and logout.
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:latest
    command: start-dev --import-realm --health-enabled=true
    volumes:
      # https://simonscholz.github.io/tutorials/keycloak-realm-export-import
      - ./keycloak/realms:/opt/keycloak/data/import
    environment:
      KEYCLOAK_LOGLEVEL: DEBUG
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    ports:
      - 8080:8080/tcp
    networks:
      webservices: {}


  # Unfortunately required as a workaround, because Keycloak
  # cannot directly import users on startup at this time.
  # This just runs a script to create the user via REST API.
  keycloak_user_setup:
    image: nginx:latest
    networks:
      default: {}
      webservices: {}
    volumes:
      - "./keycloak/users:/tmp/users"
    entrypoint: /tmp/users/create-user.sh
    depends_on:
      - keycloak


  # The JWT Block auth service.
  jwtblock:
    image: "divergentcodes/jwtblock:local"
    build:
      context: "./../../"
      dockerfile: "Dockerfile"
      args:
        - SRC_BIN_DIR=./dist/jwtblock_linux_amd64_v1
    environment:
      JWTBLOCK_DEBUG: true
      JWTBLOCK_REDIS_HOST: cache
      JWTBLOCK_HTTP_CORS_ALLOWED_ORIGINS: http://ui-app.localhost
      JWTBLOCK_JWT_VERIFY_ENABLED: true
      JWTBLOCK_JWT_VERIFY_JWKS_URL: http://keycloak:8080/realms/demo/protocol/openid-connect/certs
    # Uncomment to publicly expose ports on the machine.
    # ports:
    #   - "4474:4474"
    networks:
      webservices: {}
      cache: {}
    links:
      - cache
    depends_on:
      - cache


  # The Redis cache holding the block list.
  cache:
    image: "redis:alpine"
    # Uncomment to publicly expose ports on the machine.
    # ports:
    #   - "6379:6379"
    networks:
      cache: {}


networks:
  webservices: {}
  cache: {}
